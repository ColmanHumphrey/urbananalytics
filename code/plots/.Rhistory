is.null(rstwft)
GenGeomGrob()
dens_grob
names(dens_col)
dens_col[[1]]
dens_col[[2]]
lengths(dens_legend)
dens_grob
dens_grob
dev.off()
dens_grob
dens_grob
dd
dens_legend
?rescale
?scale_fill_gradientn
dens_grob
dens_grob
dev.off()
dev.off()
plot(blockgroup_plain)
dev.off()
gg = ggplot(blockgroup[1:100,], aes(fill  = pop_density)) + geom_sf()
gg = ggplot(blockgroup_geom[1:100,], aes(fill  = pop_density)) + geom_sf()
gg
gg = gg +     theme(
        plot.background = element_rect(fill = 'white')
       ,panel.background = element_rect(fill = 'white')
       ,panel.grid.major = element_line(color = 'transparent')
       ,axis.text = element_blank()
       ,axis.ticks = element_blank()
    )

gg
gg = gg +     theme(
        plot.background = element_rect(fill = 'white')
       ,panel.background = element_rect(fill = 'white')
       ,panel.grid.major = element_line(color = 'transparent')
       ,axis.text = element_blank()
       ,axis.ticks = element_blank()
       ,line=element_blank()
       ,axis.text=element_blank(),
        axis.title=element_blank()
    )

gg = ggplot(blockgroup_geom[1:100,], aes(fill  = pop_density)) + geom_sf()
gg = gg +     theme(
        plot.background = element_rect(fill = 'white')
       ,panel.background = element_rect(fill = 'white')
       ,panel.grid.major = element_line(color = 'transparent')
       ,axis.text = element_blank()
       ,axis.ticks = element_blank()
       ,line=element_blank()
       ,axis.title=element_blank()
    )

gg
gg = ggplot(blockgroup_geom[1:100,], aes(fill  = pop_density))
gg = gg +     geom_sf() +
    scale_fill_distiller(palette = 'RdPu',
                         direction = -1,
                         limits = c(0, 0.06),
                         name = expression('Population Density (/' ~ m^2 *')')) +
    scale_colour_distiller(palette = 'RdPu',
                           direction = -1,
                           guide = FALSE) + 

    theme(
        plot.background = element_rect(fill = 'white')
       ,panel.background = element_rect(fill = 'white')
       ,panel.grid.major = element_line(color = 'transparent')
       ,axis.text = element_blank()
       ,axis.ticks = element_blank()
       ,line=element_blank()
       ,axis.title=element_blank()
    )

gg
gg = ggplot(blockgroup_geom[1:100,], aes(fill  = pop_density))
gg = gg +     geom_sf() +
    scale_fill_distiller(palette = 'RdPu',
                         direction = 1,
                         limits = c(0, 0.06),
                         name = expression('Population Density (/' ~ m^2 *')')) +
    scale_colour_distiller(palette = 'RdPu',
                           direction = 1,
                           guide = FALSE) + 

    theme(
        plot.background = element_rect(fill = 'white')
       ,panel.background = element_rect(fill = 'white')
       ,panel.grid.major = element_line(color = 'transparent')
       ,axis.text = element_blank()
       ,axis.ticks = element_blank()
       ,line=element_blank()
       ,axis.title=element_blank()
    )

gg
max(blockgroup$pop_density)
max(blockgroup_geom$pop_density)
gg = ggplot(blockgroup_geom[1:100,], aes(fill  = pop_density))
gg = gg +     geom_sf() +
    scale_fill_distiller(palette = 'RdPu',
                         direction = 1,
                         ## limits = c(0, 0.06),
                         breaks = c(0, 0.02, 0.04, 0.06),
                         labels = c(0, 0.02, 0.04, 0.06),
                         name = expression('Population Density (/' ~ m^2 *')')) +
    scale_colour_distiller(palette = 'RdPu',
                           direction = 1,
                           guide = FALSE)
gg
gg = ggplot(blockgroup_geom[1:100,], aes(fill  = pop_density))
gg
gg = gg +     geom_sf() +
    scale_fill_distiller(palette = 'RdPu',
                         direction = 1,
                         limits = c(0, 0.06),
                         breaks = c(0, 0.02, 0.04, 0.06),
                         labels = c(0, 0.02, 0.04, 0.06),
                         name = expression('Population Density (/' ~ m^2 *')'),
                         oob = scales::squish) +
    scale_colour_distiller(palette = 'RdPu',
                           direction = 1,
                           guide = FALSE) + 

    theme(
        plot.background = element_rect(fill = 'white')
       ,panel.background = element_rect(fill = 'white')
       ,panel.grid.major = element_line(color = 'transparent')
       ,axis.text = element_blank()
       ,axis.ticks = element_blank()
       ,line=element_blank()
       ,axis.title=element_blank()
    )
gg
dens_grob
dev.off()
dev.off()
block_plain
block_plain
dens_grob
hist(blockgroup_geom$poverty_metric)
hist(blockgroup_data$poverty_metric)
hist(blockgroup_data$income)
max(blockgroup_data$income)
max(blockgroup_data$income, na.rm = TRUE)
table(is.na(blockgroup_geom$income))
table(is.na(blockgroup_geom$poverty_metric))
table(na_either)
names(blockgroup_data)
hist(blockgroup_data$vacant_proportion)
hist(blockgroup_data$mixeduse_proportion)
hist(blockgroup_data$crime_violent)
hist(blockgroup_data$crime_nonviolent)
table(crime$crimetype)
max(crime$timedate)
min(crime$timedate)
names(crime)
table(crime$crime_cat)
dim(crime_bar)
all_crimes
all_crimes
all_crimes[all_crimes_order]
names(crimebar)
names(crime_bar)
all_crimes
all_crimes
all_crimes
all_crimes
all_crimes
all_crimes
table(crime_bar$crimetype)
all_crimes
table(crime_bar$crimetype)
length(table(crime_bar$crimetype))
all_crimes
??capitalize
str_to_title(all_crimes$crimetype)
renaming
renaming
p_crimebars
business_frame[1,1:20]
rowSums(business_frame[,4:13])
colSums(business_frame[,4:13])
175 + 50 + 30 + 75 + 89
dim(landuse)
names(landuse)
GetAreas
GetAreas()
block_contain_inds[1:20]
ll <- lengths(block_contain_inds)
table(ll)
block_overlaps[1:20]
ll <- block_overlaps(ll)
ll <- lengths(block_overlaps)
ll
table(ll)
table(ll, one_ind)
names(block_data)
length(center_city_blocks)
names(block_geom)
plot(center_city_geom)
plot(County_geom)
plot(center_city_geom, add = TRUE)
dim(landuse_in_cc)
table(landuse_in_cc)
table(landuse_in_cc, landuse_on_cc)
table(landuse_in_cc, landuse_on_cc)
plot(landuse[landuse_on_cc & !landuse_in_cc,])
plot(landuse[landuse_on_cc & !landuse_in_cc,], col = 'white')
plot(landuse[landuse_on_cc & !landuse_in_cc,], col = 2)
plot(landuse[landuse_on_cc & !landuse_in_cc,] %>% select('area', 'geometry')
)
names(land_inter)
plot(land_inter %>% select(area, geometry), add = TRUE, col = 'green')
dim(cc_landuse)
names(landuse)
dev.off()
grid.newpage()
require(grid)
grid.newpage()
grid.text(label = c('y', 'r', 'u', 'dis', 'way'), x = runif(5), y = runif(5))
grid.text(label = c('y', 'r', 'u', 'dis', 'way'), x = seq(0, 1, length.out = 5))
grid.text(label = c('y', 'r', 'u', 'dis', 'way'), x = seq(-1, 1, length.out = 5),y = seq(-1, 1, length.out = 5))
grid.newpage()
grid.text(label = c('y', 'r', 'u', 'dis', 'way'), x = seq(-1, 1, length.out = 5),y = seq(-1, 1, length.out = 5))
grid.text(label = c('y', 'r', 'u', 'dis', 'way'), x = seq(-0.5, 0.5, length.out = 5),y = seq(-0.5, 0.5, length.out = 5))
grid.newpage()
grid.text(label = c('y', 'r', 'u', 'dis', 'way'), x = seq(-0.5, 0.5, length.out = 5),y = seq(-0.5, 0.5, length.out = 5))
grid.text(label = c('y', 'r', 'u', 'dis', 'way'), x = seq(0.1, 0.9, length.out = 5),y = seq(0.9, 0.1, length.out = 5))
?grid
dev.off()
dev.off()
landuse_legend
hh = bind_cols(landuse$use_detail, landuse$use_color)
landuse_legend
?grid.text
landuse_legend
landuse_legend
landuse_legend
landuse_legend
?grid.rect
grid.newpage()
grid.newpage()
MidCol <- function(c1, c2 = NULL, return_three = TRUE){
    if(is.null(c2)){
        c2 = c1[2]
        c1 = c1[1]
    }
    if(return_three){
        ret_vec = c(1,2,3)
    } else {
        ret_vec = 2
    }
    return(colorRampPalette(c(c1, c2))(3)[ret_vec])
}

MidCol('#ffff99', '#ff7f00')
MidCol('#e9181a', '#7F1315')
MidCol('#FF69B4', '#FF1493')
table(valid_land)
paste0(data_folder, '/landuse.rdata')
getwd()
setwd('../data//')
setwd('../../data//')
getwd()
cc_landuse_grob
cc_landuse_grob
getwd()
setwd('../code/plots/')
plot(1, 2, pch = 15, col = c('#003371', '#002868'))
plot(x= c(1, 2), pch = 15, col = c('#003371', '#002868'))
plot(x= c(1, 2), pch = 15, col = c('#003371', '#002868'), cex = 20)
plot(x= c(1, 2), pch = 15, col = c('#004371', '#002868'), cex = 20)
plot(x= c(1, 2), pch = 15, col = c('#002875', '#002868'), cex = 20)
plot(x= c(1, 2), pch = 15, col = c('#002885', '#002868'), cex = 20)
plot(x= c(1, 2), pch = 15, col = c('#003085', '#002868'), cex = 20)
plot(x= c(1, 2), pch = 15, col = c('#003085', '#002868'), cex = 40)
plot(x= c(1, 2), pch = 15, col = c('#003085', '#002868'), cex = 60)
plot(x= c(1, 2), pch = 15, col = c('#003085', '#002868'), cex = 80)
landuse_legend
landuse$use_color[landuse$use_color == '#002868'] = '#003085'
save(landuse, file = paste0(data_folder, 'landuse.rdata'))
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
grobX(cc_landuse_grob)
?grobX
grobX(cc_landuse_grob, 0)
grobHeight(cc_landuse_grob)
hh = ggplotGrob(cc_landuse_grob)
class(hh)
hh$gtable
hh$gTree
hh$grob
hh$gDesc
grobX(hh)
grobX(hh 0)
grobX(hh, 0)
grobY(hh, 0)
grobWidth(hh)
grobHeight(hh)
hh$grobs
names(hh$grobs[[1]])
hh$grobs[[1]]$width
hh$grobs[[2]]$width
hh$grobs[[3]]$width
hh$grobs[[4]]$width
hh$grobs[[5]]$width
lapply(hh$grobs[[5]], 'width')
lapply(hh$grobs, 'width')
lapply(hh$grobs, function(x){x$width})
hh$grobs
nn <- lapply(hh$grobs, function(x){names(x)})
nn
nn <- lapply(hh$grobs, function(x){object_size(x)})
nn
unlist(nn)
plot(unlist(nn))
which.max(nn)
names(hh$grobs[[6]])
names(hh$grobs)
hh$grobs
names(hh$grobs[[6]])
length(hh$grobs[[6]]$children)
hh$grobs[[6]]$children[[1]]
hh$grobs[[6]]$children[[9000]]
names(hh$grobs[[6]]$children[[1]])
names(hh$grobs[[6]]$children[[1]]$children)
hh$grobs[[6]]$children[[1]]$children
hh$grobs[[6]]$children[[1]]$children[[1]]
hh$grobs[[6]]$children[[1]]$children[[2]]
hh$grobs[[6]]$children[[1]]$children[[3]]
names(hh$grobs[[6]]$children[[1]]$children[[3]])
hh$grobs[[6]]$children[[1]]$children[[3]]$x
hh$grobs[[6]]$children[[1]]$children[[3]]$y
xxx = hh$grobs[[6]]$children[[1]]$children[[3]]$y
yyy = hh$grobs[[6]]$children[[1]]$children[[3]]$y
xxx = hh$grobs[[6]]$children[[1]]$children[[3]]$x
xxx
class(xxx)
xxx <- substr(xxx, 1, 5)
xxx
yyy <- substr(yyy, 1, 5)
yyy
plot(as.numeric(yyy))
grid.newpage()
grid.draw(hh$grobs[[6]]$children[[1]]$children[[3]])
grid.draw(hh$grobs[[6]]$children[[1]])
grid.draw(hh$grobs[[6]]$children[[2]])
grid.newpage()
grid.draw(hh$grobs)
grid.draw(hh$grobs[[6]])
plot(c(1, 2), col = c('#003085', '#003085'), pch = 15, cex = 40)
plot(c(1, 2), col = c('#003085', '#003085'), pch = 15, cex = 90)
plot(c(1, 2), col = c('#003085', '#005095'), pch = 15, cex = 90)
plot(c(1, 2, 3), col = c('#003085', '#005095', '#0097FF'), pch = 15, cex = 90)
plot(c(1, 2, 3), col = c('#003085', '#005095', '#0097FF'), pch = 15, cex = 50)
plot(c(1, 2, 3), col = c('#003085', '#0040a5', '#0097FF'), pch = 15, cex = 50)
plot(c(1, 2, 3), col = c('#004085', '#0040a5', '#0097FF'), pch = 15, cex = 50)
plot(c(1, 2, 3), col = c('#0030a5', '#0040a5', '#0097FF'), pch = 15, cex = 50)
plot(c(1, 2, 3), col = c('#0025a5', '#0040a5', '#0097FF'), pch = 15, cex = 50)
plot(c(1, 2, 3), col = c('#0035b5', '#0040a5', '#0097FF'), pch = 15, cex = 50)
plot(c(1, 2, 3), col = c('#0035b5', '#001599', '#0097FF'), pch = 15, cex = 50)
plot(c(1, 2, 3), col = c('#0015f5', '#001599', '#0097FF'), pch = 15, cex = 50)
plot(c(1, 2, 3), col = c('#0015b5', '#001599', '#0097FF'), pch = 15, cex = 50)
plot(c(1, 2, 3), col = c('#0035c5', '#001599', '#0097FF'), pch = 15, cex = 50)
plot(c(1, 2, 3), col = c('#0015c5', '#001599', '#0097FF'), pch = 15, cex = 50)
par(bg = 'black')
plot(c(1, 2, 3), col = c('#0015c5', '#001599', '#0097FF'), pch = 15, cex = 50)
landuse$use_color[landuse$use_color == '#003085'] = '#0015c5'
save(landuse, file = paste0(data_folder, 'landuse.rdata'))
grid.newpage()
landuse_full_grob <- County_geom
cc_landuse_full_grob <- center_city_geom
dev.off()
dev.off()
dev.off()
plot(County_geom)
landuse_full_grob <- ggplot(County_geom) + geom_sf()
cg <- data_frame(a = 1, geometry = County_geom)
landuse_full_grob <- ggplot(cg) + geom_sf()
landuse_full_grob
landuse_full_grob + near_empty_theme
landuse_full_grob = landuse_full_grob + near_empty_theme
cgcc <- data_frame(a = 1, geometry = center_city_geom)
cc_landuse_grob <- ggplot(cgcc) + geom_sf()
dev.off()
dev.off()
st_crs(cg)
st_crs(County_geom)
st_crs(cg) = st_crs(County_geom)
cg <- st_as_sf(a = 1, geometry = County_geom)
sf(cg)
class(cg)
class(cg) = c(class(cg), 'sf')
class(cg)
st_crs(cg)
dim(cg)
cg
st_as_sf(cg)
cg = st_as_sf(cg)
cg <- st_as_sf(data_frame(a = 1, geometry = County_geom))
cg
class(cg)
st_crs(cg)
cgcc <- st_as_sf(data_frame(a = 1, geometry = center_city_geom))
landuse_full_grob <- ggplot(cg) + geom(sf)
landuse_full_grob <- ggplot(cg) + geom_sf()
cc_landuse_grob <- ggplot(cgcc) + geom_sf()
dev.off()
landuse_full_grob <- ggplot(cg) + geom_sf() + near_empty_theme
cc_landuse_grob <- ggplot(cgcc) + geom_sf() + near_empty_theme
dev.off()
landuse_full_grob <- ggplot(cg) + geom_sf() + near_empty_theme
cc_landuse_grob <- ggplot(cgcc) + geom_sf() + near_empty_theme
dev.off()
strwrap(landuse_legend$use_names, 20)
strwrap(landuse_legend$use_names, 4)
strwrap(landuse_legend$use_names, 5)
str_wrap(landuse_legend$use_names, 5)
dev.off()
grid.draw(legblock)
grid.draw(legtext)
grid.newpage()
grid.draw(legblock)
grid.draw(legtext)
strwrap(landuse_legend$use_names, 5)
str_wrap(landuse_legend$use_names, 15
)
landuse_legend
grid.newpage()
grid.draw(legblock)
grid.draw(legtext)
grid.newpage()
grid.draw(legblock)
grid.draw(legtext)
dev.off()
dev.off()
landuse_legend
library(gridExtra)
?grid.ellipse()
dev.off()
plot(County_geom)
plot(center_city_geom, add = TRUE)
dev.off()
dev.off()
dev.off()
llp <- st_as_sf(data_frame(a = c(1, 2), geometry = c(County_geom, center_city_geom)))
plot(llp)
ggll <- ggplot(llp) + geom_sf() + near_empty_theme
ggll
landuse_full_grob = ggll
grid.arrows(x = c(0.385, 0.7), y = c(0.368, 0.65))
grid.lines(x = c(0.385, 0.7), y = c(0.368, 0.65))
grid.lines(x = c(0.385, 0.7), y = c(0.368, 0.365))
grid.lines(x = c(0.385, 0.65), y = c(0.368, 0.36))
grid.lines(x = c(0.385, 0.65), y = c(0.368, 0.34))
grid.lines(x = c(0.385, 0.55), y = c(0.368, 0.34))
grid.lines(x = c(0.385, 0.55), y = c(0.368, 0.35))
)
)
arrows
?arrow
unit(0.25, "native")
valid.units(           grid::arrow(angle = 30, length = unit(0.25, "native"),
                 ends = "last", type = "open")$length)
